by = "measuredItemCPC", all.x = TRUE, suffixes = c("", ".loss"))[, measuredItemCPC]
lossEstimates[, c("Value_measuredElement_5120",
"measuredItemCPC"),
with = FALSE]
merge(lossEstimates[, c("Value_measuredElement_5120",
"measuredItemCPC"), with = FALSE],
wheatData, by = "measuredItemCPC", all.y = TRUE,
suffixes = c(".loss", ""))
wheatData = merge(lossEstimates[, c("Value_measuredElement_5120",
wheatData, by = "measuredItemCPC", all.y = TRUE,
"measuredItemCPC"), with = FALSE],
suffixes = c(".loss", ""))
wheatData = merge(lossEstimates[, c("Value_measuredElement_5120",
"measuredItemCPC"), with = FALSE],
wheatData, by = "measuredItemCPC", all.y = TRUE,
suffixes = c(".loss", ""))
wheatData[, Value_measuredElement_5120 := Value_measuredElement_5120.loss]
wheatData[, Value_measuredElement_5120.loss := NULL]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
load(paste0(workingDir, "/seedEstimates.RData"))
wheatData = merge(seedEstimates[, c("Value_measuredElement_5525",
"measuredItemCPC"), with = FALSE],
wheatData, by = "measuredItemCPC", all.y = TRUE,
suffixes = c(".seed", ""))
wheatData[, Value_measuredElement_5525 := Value_measuredElement_5525.seed]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
wheatData[, Value_measuredElement_5525.seed := NULL]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
plotSingleTree(edges = tree[parentID %in% wheatKeys, ],
extractionColname = "extractionRate", box.size = .08,
parentColname = "parentID", childColname = "childID",
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
tree = fread(paste0(workingDir, "standardizationTree.csv"))
plotSingleTree(edges = tree[parentID %in% wheatKeys, ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
wheatTree
standardize
tree
wheatData
toPrint
printTable(toPrint)
tree[parentID %in% wheatKeys, ]
tree[parentID %in% cattleKeys, ]
plotSingleTree(edges = tree[parentID %in% wheatKeys, ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
plotSingleTree(edges = tree[parentID %in% cattleKeys, ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
plotSingleTree(edges = tree[parentID %in% cattleKey[!is.na(cattleKeys)s, ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
plotSingleTree(edges = tree[parentID %in% cattleKeys[!is.na(cattleKeys), ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
plotSingleTree(edges = tree[parentID %in% cattleKeys[!is.na(cattleKeys)], ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
cattleKeys
tree
plotSingleTree(edges = tree[parentID %in% cattleKeys & !is.na(childID), ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
plotSingleTree(edges = tree[parentID %in% palmOilKeys & !is.na(childID), ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
toProcessed
wheatData
tree
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
shares
tree1
shares
tree
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
shares
tree1 = merge(tree1, shares, all = TRUE)
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
tree1
tree
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
tree1
shares
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
tree1
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, Value_share/100 * extractionRate]
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, Value_share/100 * extractionRate)]
tree1
tree1[, Value_share := NULL]
tree1
standardizeTree
wheatData
fbsElements = c(5113, 5025, 5312, 5510, 5327, 5421, 5520, 5525,
5120, 5023, 5141, 71, 5600, 5800)
wheatData
wheatData[, c("measuredItemCPC", "timePointYears", fbsElements), with = FALSE]
fbsElements
c("measuredItemCPC", "timePointYears", fbsElements)
wheatData[, c("measuredItemCPC", "timePointYears", paste0("Value_measuredElement_", fbsElements), with = FALSE]
wheatData[, c("measuredItemCPC", "timePointYears", paste0("Value_measuredElement_", fbsElements)), with = FALSE]
wheatData = wheatData[, c("measuredItemCPC", "timePointYears", paste0("Value_measuredElement_", fbsElements)), with = FALSE]
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
## If Value_share is not NA, this is a primary to first processing edge
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, Value_share/100 * extractionRate)]
tree1[, Value_share := NULL]
standardizeTree
args(standardizeTree)
wheatData
suppressWarnings({suppressMessages({
library(data.table)
library(faoswsProduction)
library(faoswsImputation)
library(faoswsSeed)
library(diagram) # For plotting commodity trees
if(Sys.info()[7] == "josh"){ # Josh Work
workingDir = "~/Documents/Github/Working/OrangeBook/"
} else if(Sys.info()[7] %in% c("browningj", "rockc_000")){ # Josh virtual & home
workingDir = "~/Github/Working/OrangeBook/"
} else {
stop("No working dir for current user!")
}
## Source AUPUS files
files = dir(paste0(workingDir, "../../faoswsAupus/R"), full.names = TRUE)
## Assign to temp so as to prevent writing to screen
temp = sapply(files, source)
})})
suppressWarnings({suppressMessages({
fbsElements = c(5113, 5025, 5312, 5510, 5327, 5421, 5520, 5525,
5120, 5023, 5141, 71, 5600, 5800)
printTable = function(data, updates = NULL){
printDT = copy(data)
setnames(printDT, paste0("Value_measuredElement_", fbsElements),
c("OpeningStock", "AreaSown", "AreaHarvested", "Production",
"Input", "Yield", "Feed", "Seed", "Waste", "Processed", "Food",
"StockChange", "Imports", "Exports"))
setnames(printDT, "measuredItemCPC", "Item")
items = c("Item", "Production", "Imports", "Exports", "StockChange", "Food", "Feed",
"Waste", "Seed", "Industrial", "Tourist", "Residual")
sapply(items, function(colName){
if(!colName %in% colnames(printDT)){
printDT[, c(colName) := NA_real_]
}
})
knitr::kable(printDT[, items, with = FALSE])
}
wheatKeys = c("0111", "23110", "23140.01", "23140.02", "23140.03", "23220.01",
"23220.02", "23490.02", "23710", "39120.01", "F0020", "F0022")
cattleKeys = c("21111.01", "21111.02", "21182", "21184.01", "21185",
"21512.01", "23991.04", "F0875")
fsPalm = c("0256", "0257", "0258", "0259", "1241", "1242", "1243", "1274",
"1275", "1276")
palmOilKeys = c("01491.02", "2165", "21691.14", "21910.06", "21700.01",
"21700.02", "F1243", "34550", "F1275", "34120")
fullData = fread(paste0(workingDir, "standardizationData.csv"))
## Coerce food from logical (default since all NA) to numeric
fullData[, Value_measuredElement_5141 := as.numeric(Value_measuredElement_5141)]
## Set up empty variable for stock changes
fullData[, Value_measuredElement_71 := NA_real_]
pulledElements = c("5113", "5025", "5312", "5510", "5421", "5520", "5525",
"5023", "5327", "5016", "5141", "5120")
## Avoid printing all the data.table's
sink("temp.txt")
sapply(pulledElements, function(el){
val = paste0("Value_measuredElement_", el)
oFl = paste0("flagObservationStatus_measuredElement_", el)
mFl = paste0("flagMethod_measuredElement_", el)
fullData[is.na(get(val)), c(oFl) := "M"]
fullData[is.na(get(val)), c(mFl) := "u"]
fullData[is.na(get(val)), c(val) := 0]
## A bit hackish, but use "" flags if NA
fullData[is.na(get(oFl)), c(oFl) := ""]
fullData[is.na(get(oFl)), c(mFl) := ""]
})
sink()
})})
suppressWarnings({suppressMessages({
fbsElements = c(5113, 5025, 5312, 5510, 5327, 5421, 5520, 5525,
5120, 5023, 5141, 71, 5600, 5800)
printTable = function(data, updates = NULL){
printDT = copy(data)
setnames(printDT, paste0("Value_measuredElement_", fbsElements),
c("OpeningStock", "AreaSown", "AreaHarvested", "Production",
"Input", "Yield", "Feed", "Seed", "Waste", "Processed", "Food",
"StockChange", "Imports", "Exports"))
setnames(printDT, "measuredItemCPC", "Item")
items = c("Item", "Production", "Imports", "Exports", "StockChange", "Food", "Feed",
"Waste", "Seed", "Industrial", "Tourist", "Residual")
sapply(items, function(colName){
if(!colName %in% colnames(printDT)){
printDT[, c(colName) := NA_real_]
}
})
knitr::kable(printDT[, items, with = FALSE])
}
wheatKeys = c("0111", "23110", "23140.01", "23140.02", "23140.03", "23220.01",
"23220.02", "23490.02", "23710", "39120.01", "F0020", "F0022")
cattleKeys = c("21111.01", "21111.02", "21182", "21184.01", "21185",
"21512.01", "23991.04", "F0875")
fsPalm = c("0256", "0257", "0258", "0259", "1241", "1242", "1243", "1274",
"1275", "1276")
palmOilKeys = c("01491.02", "2165", "21691.14", "21910.06", "21700.01",
"21700.02", "F1243", "34550", "F1275", "34120")
fullData = fread(paste0(workingDir, "standardizationData.csv"))
## Coerce food from logical (default since all NA) to numeric
fullData[, Value_measuredElement_5141 := as.numeric(Value_measuredElement_5141)]
## Set up empty variable for stock changes
fullData[, Value_measuredElement_71 := NA_real_]
pulledElements = c("5113", "5025", "5312", "5510", "5421", "5520", "5525",
"5023", "5327", "5016", "5141", "5120")
## Avoid printing all the data.table's
sink("temp.txt")
sapply(pulledElements, function(el){
val = paste0("Value_measuredElement_", el)
oFl = paste0("flagObservationStatus_measuredElement_", el)
mFl = paste0("flagMethod_measuredElement_", el)
fullData[is.na(get(val)), c(oFl) := "M"]
fullData[is.na(get(val)), c(mFl) := "u"]
fullData[is.na(get(val)), c(val) := 0]
## A bit hackish, but use "" flags if NA
fullData[is.na(get(oFl)), c(oFl) := ""]
fullData[is.na(get(oFl)), c(mFl) := ""]
})
sink()
})})
suppressWarnings({suppressMessages({
wheatData = fullData[measuredItemCPC %in% wheatKeys, ]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
})})
suppressWarnings({suppressMessages({
load(paste0(workingDir, "/stockEstimates.RData"))
wheatData = merge(wheatData, stockEstimates[, c("Value", "measuredItemCPC"),
with = FALSE],
by = "measuredItemCPC", all.x = TRUE)
wheatData[, Value_measuredElement_71 := Value]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
wheatData[, Value := NULL]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
})})
suppressWarnings({suppressMessages({
load(paste0(workingDir, "/foodEstimates.RData"))
wheatData = merge(wheatData, foodEstimates[, c("mean", "measuredItemCPC"),
with = FALSE],
by = "measuredItemCPC", all.x = TRUE)
wheatData[, Value_measuredElement_5141 := mean]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
wheatData[, mean := NULL]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
})})
suppressWarnings({suppressMessages({
load(paste0(workingDir, "/lossEstimates.RData"))
wheatData = merge(lossEstimates[, c("Value_measuredElement_5120",
"measuredItemCPC"), with = FALSE],
wheatData, by = "measuredItemCPC", all.y = TRUE,
suffixes = c(".loss", ""))
wheatData[, Value_measuredElement_5120 := Value_measuredElement_5120.loss]
wheatData[, Value_measuredElement_5120.loss := NULL]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
})})
suppressWarnings({suppressMessages({
load(paste0(workingDir, "/seedEstimates.RData"))
wheatData = merge(seedEstimates[, c("Value_measuredElement_5525",
"measuredItemCPC"), with = FALSE],
wheatData, by = "measuredItemCPC", all.y = TRUE,
suffixes = c(".seed", ""))
wheatData[, Value_measuredElement_5525 := Value_measuredElement_5525.seed]
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
wheatData[, Value_measuredElement_5525.seed := NULL]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
})})
wheatData
wheatData = wheatData[, c("measuredItemCPC", "timePointYears", "geographicAreaM49",
paste0("Value_measuredElement_", fbsElements)), with = FALSE]
wheatData = wheatData[, c("measuredItemCPC", "timePointYears", "geographicAreaM49",
paste0("Value_measuredElement_", fbsElements)), with = FALSE]
args(standardizeTree)
tree
tree1[, share := 1]
tree1[, share := 1]
standardizeTree(data = wheatData, tree = tree1, elements = fbsElements,
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement")
tree1
wheatData
tree1[, geographicAreaM49 := "231"]
tree1[, timePointYears := "2011"]
standardizeTree(data = wheatData, tree = tree1, elements = fbsElements,
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement")
wheatData
standardizeTree(data = wheatData, tree = tree1, elements = fbsElements,
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
wheatData
step1 = standardizeTree(data = wheatData, tree = tree1, elements = fbsElements,
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
tree1[, geographicAreaM49 := "840"]
tree1[, timePointYears := "2011"]
step1 = standardizeTree(data = wheatData, tree = tree1, elements = fbsElements,
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
tree1
wheatTree[geographicAreaM49 == "840", ]
wheatData[geographicAreaM49 == "840", ]
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
printTable(toPrint)
tree1
standardizeTree
fbsElements
fbsElements[-4]
step1 = standardizeTree(data = wheatData, tree = tree1, elements = fbsElements[fbsElements != "5510"],
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
toPrint
printTable(toPrint)
wheatData
step1 = merge(step1, wheatData[, list(measuredItemCPC, timePointYears, geographicAreaM49, Value_measuredElement_5510)])
step1 = merge(step1, wheatData[, list(measuredItemCPC, timePointYears, geographicAreaM49, Value_measuredElement_5510)],
by = c("measuredItemCPC", "timePointYears", "geographicAreaM49"))
step1
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
step1
printTable(toPrint)
toPrint
wheatData
wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "23110", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "23110", Value_measuredElement_5600]
plotSingleTree(edges = tree[parentID %in% wheatKeys, ],
parentColname = "parentID", childColname = "childID",
extractionColname = "extractionRate", box.size = .08,
box.type = "circle", cex.txt = 2, box.prop = .5, box.cex = 1.9)
})})
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "23140.02", Value_measuredElement_5600]
share
shares
shares[childID == "23140.02", Value_share]
shares[childID == "23140.02", Value_share]
tree
tree[childID == "23140.02", extractionRate]
round(tree[childID == "23140.02", extractionRate]*100, 0)
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]
tree[childID == "23140.02", extractionRate]*100
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/tree[childID == "23140.02", extractionRate]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/tree[childID == "23140.02", extractionRate] + wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "23140.02", Value_measuredElement_5600]
printTable(toPrint)
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
toPrint = wheatData[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
tree1
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
## If Value_share is not NA, this is a primary to first processing edge
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, 100*extractionRate/Value_share)]
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
## If Value_share is not NA, this is a primary to first processing edge
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, 100*extractionRate/Value_share)]
tree1
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, 100*extractionRate/Value_share)]
tree1[, Value_share := NULL]
tree1[, share := 1]
tree1[, geographicAreaM49 := "840"]
tree1[, timePointYears := "2011"]
step1 = standardizeTree(data = wheatData, tree = tree1, elements = fbsElements[fbsElements != "5510"],
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
step1 = merge(step1, wheatData[, list(measuredItemCPC, timePointYears, geographicAreaM49, Value_measuredElement_5510)],
by = c("measuredItemCPC", "timePointYears", "geographicAreaM49"))
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
printTable(toPrint)
tree1 = copy(tree)
shares = fread(paste0(workingDir, "shareData.csv"))
setnames(shares, c("measuredItemParentFS", "measuredItemChildFS"),
c("parentID", "childID"))
tree1 = merge(tree1, shares, all = TRUE, by = c("childID", "parentID"))
## If Value_share is not NA, this is a primary to first processing edge
tree1[!is.na(Value_share), c("parentID", "childID", "extractionRate") :=
list(childID, parentID, 100*extractionRate/Value_share)]
tree1[, Value_share := NULL]
tree1[, share := 1]
tree1[, geographicAreaM49 := "840"]
tree1[, timePointYears := "2011"]
step1 = standardizeTree(data = wheatData, tree = tree1, elements = fbsElements[fbsElements != "5510"],
yearVar = "timePointYears", geoVar = "geographicAreaM49",
itemVar = "measuredItemCPC", elementPrefix = "Value_measuredElement_")
## Merge back in production
step1 = merge(step1, wheatData[, list(measuredItemCPC, timePointYears, geographicAreaM49, Value_measuredElement_5510)],
by = c("measuredItemCPC", "timePointYears", "geographicAreaM49"))
toPrint = step1[geographicAreaM49 == "840" & timePointYears == "2011", ]
## Remove alot of the data, and "impute" it later
printTable(toPrint)
tree[childID == "23140.02", extractionRate]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/(100*tree[childID == "23140.02", extractionRate]) + wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "23140.02", Value_measuredElement_5600]
wheatData[geographicAreaM49 == "840" & timePointYears == "2011" & measuredItemCPC == "0111", Value_measuredElement_5600]*shares[childID == "23140.02", Value_share]/(100*tree[childID == "23140.02", extractionRate])
wheatData
cattleData = fullData[measuredItemCPC %in% cattleKeys, ]
rm(wheatData)
library(faosws)
library(data.table)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "2789cc75-120e-4963-9694-41c4bcf67814"
#     baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
#     token = "7fe7cbec-2346-46de-9a3a-8437eca18e2a" #Michael's token
)
switchProd()
library(faosws)
library(data.table)
GetTestEnvironment(
baseUrl = "https://hqlprswsas1.hq.un.fao.org:8181/sws",
token = "2789cc75-120e-4963-9694-41c4bcf67814"
#     baseUrl = "https://hqlqasws1.hq.un.fao.org:8181/sws",
#     token = "7fe7cbec-2346-46de-9a3a-8437eca18e2a" #Michael's token
)
GetCodeList("suafbs", "nutrient_factors_cpc", "measuredElementNutritive")
nutrCodes[, description]
nutrCodes = GetCodeList("suafbs", "nutrient_factors_cpc",
"measuredElementNutritive")
nutrCodes[, description]
nutrCodes = nutrCodes[description %in% c("Energy [kcal]", "Protein [g]",
"Carbohydrate, by difference [g]"),
code]
nutrCodes
GetCodeList("suafbs", "nutrient_factors_cpc",
"measuredItemHS")
GetCodeList("suafbs", "nutrient_factors_cpc",
"timePointFake")
Sys.info()[7]
shiny::runApp('GitHub/privateFAO/OrangeBook/capacityDevelopment')
library(shinyapps)
setwd("~/GitHub/privateFAO/OrangeBook/capacityDevelopment/")
install.packages("shinyapps")
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
shinyapps::setAccountInfo(name='josh-browning-fao',
token='8BB9073601D332A675DA3F8712F43018',
secret='<Get from shinyapps.io>')
?faosws::GetData
?faosws::GetBlockMetadata
faosws:::GetMetadata(
faosws:::GetMetadata
shinyapps::setAccountInfo(name='josh-browning-fao', token='8BB9073601D332A675DA3F8712F43018', secret='XjfCy+QdrXbJ+ZAwvYVlD/Ra9KRJCqKVsEpp4d/1')
library(shinyapps)
setwd("~/GitHub/privateFAO/OrangeBook/capacityDevelopment/")
# files = dir("../Helper Functions/", pattern = "*.R", full.names = TRUE)
# sapply(files, function(x) file.copy(from = x, to = "R/"))
deployApp(appName = "capacity-development-plfhmeikcrp8uf3yhw8oiygpihi8n0v1vip5n2v8r6o74qshqz",
account = "josh-browning-fao")
deployApp
?deployApp
deployApp(appName = "capacity-development-plfhmeikcrp8uf3yhw8oiygpihi8n0v1vip5n2v8r6o74qshqz",
account = "josh-browning-fao", appName = "capacity-development")
deployApp(appName = "capacity-development-plfhmeikcrp8uf3yhw8oiygpihi8n0v1vip5n2v8r6o74qshqz",
account = "josh-browning-fao")
